import skimage.io, skimage.color
import numpy
import matplotlib
import matplotlib.pyplot
def calculate_gradient(img, template):
    ts = template.size #Number of elements in the template (3).
    #New padded array to hold the resultant gradient image.
    new_img = numpy.zeros((img.shape[0]+ts-1,img.shape[1]+ts-1))
    new_img[numpy.uint16((ts-1)/2.0):img.shape[0]+numpy.uint16((ts-1)/2.0),numpy.uint16((ts-1)/2.0):img.shape[1]+numpy.uint16((ts-1)/2.0)] = img
    result = numpy.zeros((new_img.shape))
    for r in numpy.uint16(numpy.arange((ts-1)/2.0,img.shape[0]+(ts-1)/2.0)):
        for c in numpy.uint16(numpy.arange((ts-1)/2.0,img.shape[1]+(ts-1)/2.0)):
            curr_region = new_img[r-numpy.uint16((ts-1)/2.0):r+numpy.uint16((ts-1)/2.0)+1,c-numpy.uint16((ts-1)/2.0):c+numpy.uint16((ts-1)/2.0)+1]
            curr_result = curr_region * template
            score = numpy.sum(curr_result)
            result[r, c] = score
    result_img = result[numpy.uint16((ts-1)/2):result.shape[0]-numpy.uint16((ts-1)/2),numpy.uint16((ts-1)/2):result.shape[1]-numpy.uint16((ts-1)/2)]
    return result_img

def gradient_magnitude(horizontal_gradient, vertical_gradient):
    horizontal_gradient_square = numpy.power(horizontal_gradient, 2)
    vertical_gradient_square = numpy.power(vertical_gradient, 2)
    sum_squares = horizontal_gradient_square + vertical_gradient_square
    grad_magnitude = numpy.sqrt(sum_squares)
    return grad_magnitude

def gradient_direction(horizontal_gradient, vertical_gradient):
    grad_direction = numpy.arctan(vertical_gradient/(horizontal_gradient+0.00000001))
    grad_direction = numpy.rad2deg(grad_direction)
    # Some angles are outside the 0-180 range. Next line makes all results fall within the 0-180 range.
    grad_direction = grad_direction % 180
    return grad_direction

def HOG_cell_histogram(cell_direction, cell_magnitude):
    HOG_cell_hist = numpy.zeros(shape=(hist_bins.size))
    cell_size = cell_direction.shape[0]
    for row_idx in range(cell_size):
        for col_idx in range(cell_size):
            curr_direction = cell_direction[row_idx, col_idx]
            curr_magnitude = cell_magnitude[row_idx, col_idx]
            diff = numpy.abs(curr_direction - hist_bins)
            if curr_direction < hist_bins[0]:
                first_bin_idx = 0
                second_bin_idx = hist_bins.size-1
            elif curr_direction > hist_bins[-1]:
                first_bin_idx = hist_bins.size-1
                second_bin_idx = 0
            else:
                first_bin_idx = numpy.where(diff == numpy.min(diff))[0][0]
                temp = hist_bins[[(first_bin_idx-1)%hist_bins.size, (first_bin_idx+1)%hist_bins.size]]
                temp2 = numpy.abs(curr_direction - temp)
                res = numpy.where(temp2 == numpy.min(temp2))[0][0]
                if res == 0 and first_bin_idx != 0:
                    second_bin_idx = first_bin_idx-1
                else:
                    second_bin_idx = first_bin_idx+1
            first_bin_value = hist_bins[first_bin_idx]
            second_bin_value = hist_bins[second_bin_idx]
            HOG_cell_hist[first_bin_idx] = HOG_cell_hist[first_bin_idx] + (numpy.abs(curr_direction - first_bin_value)/(180.0/hist_bins.size)) * curr_magnitude
            HOG_cell_hist[second_bin_idx] = HOG_cell_hist[second_bin_idx] + (numpy.abs(curr_direction - second_bin_value)/(180.0/hist_bins.size)) * curr_magnitude
    return HOG_cell_hist

img = skimage.io.imread("logo.jpg")
if img.ndim >2:
    img = img[:, :, 0]

#Calculating Max Height & Width
print("Maximum Height:" , img.shape[0])
print("Maximum Width:", img.shape[1])


horizontal_mask = numpy.array([-1, 0, 1])
vertical_mask = numpy.array([[-1],
                             [0],
                             [1]])
horizontal_gradient = calculate_gradient(img, horizontal_mask)
matplotlib.pyplot.show()
vertical_gradient = calculate_gradient(img, vertical_mask)
grad_magnitude = gradient_magnitude(horizontal_gradient, vertical_gradient)
grad_direction = gradient_direction(horizontal_gradient, vertical_gradient)
grad_direction = grad_direction % 180
hist_bins = numpy.array([10,30,50,70,90,110,130,150,170])
cell = [8,8]
incr = [4,4]
hist_cell_array = []
h=0
w=0
max_h = int(((img.shape[0]-cell[0])/incr[0])+1)
max_w = int(((img.shape[1]-cell[1])/incr[1])+1)
print("GRAD DIR", grad_direction.shape[0], grad_direction.shape[1])
#for entire height of image
for height_idx in range(max_h):
    w=0
    #for entire width of image
    for width_idx in range(max_w):
        cell_direction = grad_direction[h:h+cell[0], w:w+cell[1]]
        # print("h-idx:", height_idx, "w-idx:", width_idx, "cell - dir", "h: ", h,"w", w ,cell_direction.shape[0],cell_direction.shape[1])
        cell_magnitude = grad_magnitude[h:h+cell[0], w:w+cell[1]]
        HOG_cell_hist = HOG_cell_histogram(cell_direction, cell_magnitude)
        hist_cell_array.append(HOG_cell_hist)
        w += incr[1]
    h += incr[0]
    

matplotlib.pyplot.bar(x=numpy.arange(9), height=HOG_cell_hist, align="center", width=0.8)
matplotlib.pyplot.show()
print(hist_cell_array)
print(len(hist_cell_array))
matplotlib.pyplot.show()
matplotlib.pyplot.imshow(horizontal_gradient)
matplotlib.pyplot.show()
matplotlib.pyplot.imshow(vertical_gradient)
matplotlib.pyplot.show()
print(HOG_cell_hist)
